{"remainingRequest":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\src\\views\\Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\src\\views\\Dashboard.vue","mtime":1562823123597},{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"C:\\\\Users\\\\MATTO\\\\Documents\\\\GitHub\\\\iXTimeline-Source\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport processData from \"../assets/PROCESS.json\";\nimport registryData from \"../assets/REGISTRY.json\";\nexport default {\n  data: function data() {\n    return {\n      chartData: [],\n      chartOptions: {\n        hAxis: {\n          minValue: '',\n          maxValue: ''\n        }\n      },\n      processData: processData,\n      registryData: registryData,\n      activeData: [3719751],\n      tabs: 0,\n      list: {\n        0: false,\n        1: false,\n        2: false\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    console.log(\"hello\");\n\n    document.onreadystatechange = function () {\n      if (document.readyState == \"complete\") {\n        // run code here\n        _this.drawDashboard();\n      }\n    };\n  },\n  methods: {\n    drawDashboard: function drawDashboard() {\n      var control = new google.visualization.ControlWrapper({\n        controlType: 'ChartRangeFilter',\n        containerId: 'control',\n        options: {\n          // Filter by the date axis.\n          filterColumnIndex: 1,\n          ui: {\n            chartType: 'LineChart',\n            minRangeSize: 600000,\n            chartOptions: {\n              width: 1200,\n              height: 70,\n              hAxis: {\n                format: 'hh:mm:ss',\n                ticks: [this.chartOptions.hAxis.minValue, this.chartOptions.hAxis.maxValue]\n              },\n              chartArea: {\n                width: '90%',\n                // make sure this is the same for the chart and control so the axes align right\n                height: '90%'\n              }\n            },\n            chartView: {\n              columns: [1, {\n                type: 'number',\n                calc: function calc() {\n                  return 0;\n                }\n              }]\n            }\n          }\n        }\n      });\n      var dashboard = new google.visualization.Dashboard(document.getElementById('dashboard'));\n      var chart = new google.visualization.ChartWrapper({\n        'chartType': 'Timeline',\n        'containerId': 'chart',\n        'options': {\n          'width': 1200,\n          'height': 600,\n          'chartArea': {\n            width: '100%',\n            // make sure this is the same for the chart and control so the axes align right\n            height: '100%'\n          },\n          'backgroundColor': '#ffd'\n        },\n        'view': {\n          'columns': [0, 1, 2]\n        }\n      });\n      var data = new google.visualization.arrayToDataTable(this.chartData);\n      dashboard.bind(control, chart);\n      dashboard.draw(data);\n    },\n    refactorProcess: function refactorProcess() {\n      console.log('in refactor');\n      var tempProcess = {};\n\n      for (var i in this.processData) {\n        var properties = {};\n        var registryID = '';\n        var tempArray = [];\n\n        for (var j in this.processData[i]) {\n          registryID = this.processData[i][j].RegistryID;\n\n          if (tempProcess.hasOwnProperty(registryID)) {\n            properties[j] = this.processData[i][j];\n            tempProcess[registryID].push(properties[j]);\n          } else {\n            properties[j] = this.processData[i][j];\n            tempArray.push(properties[j]);\n            tempProcess[registryID] = tempArray;\n          }\n\n          tempArray = [];\n        }\n      }\n\n      this.processData = tempProcess;\n    },\n    refactorRegistry: function refactorRegistry() {\n      console.log('in refactor registry');\n      var tempRegistry = {};\n\n      for (var i in this.registryData) {\n        var properties = {};\n        var registryID = '';\n\n        for (var j in this.registryData[i]) {\n          registryID = this.registryData[i][j].RegistryID;\n          properties[j] = this.registryData[i][j];\n          tempRegistry[registryID] = properties[j];\n        }\n      }\n\n      this.registryData = tempRegistry;\n    },\n    calcRegistryBeginEndTime: function calcRegistryBeginEndTime() {\n      var registryID = '';\n      var minProcessBeginArray = [];\n      var maxProcessEndArray = [];\n\n      for (var i in this.registryData) {\n        registryID = i;\n\n        for (var j = 0; j < this.processData[registryID].length; j++) {\n          minProcessBeginArray.push(Date.parse(this.processData[registryID][j].ProcessBeginTime));\n          maxProcessEndArray.push(Date.parse(this.processData[registryID][j].ProcessEndTime));\n        }\n\n        if (minProcessBeginArray.length > 0) {\n          this.registryData[registryID].BeginTime = Math.min.apply(Math, _toConsumableArray(minProcessBeginArray));\n        }\n\n        if (maxProcessEndArray.length > 0) {\n          this.registryData[registryID].EndTime = Math.max.apply(Math, _toConsumableArray(maxProcessEndArray));\n        }\n\n        maxProcessEndArray = [];\n        minProcessBeginArray = [];\n      }\n    },\n    calcChartRange: function calcChartRange() {\n      var chartMin = [];\n      var chartMax = [];\n\n      for (var i in this.registryData) {\n        console.log(this.registryData[i].BeginTime);\n        chartMin.push(this.registryData[i].BeginTime);\n        chartMax.push(this.registryData[i].EndTime);\n      }\n\n      this.chartOptions.hAxis.minValue = new Date(Math.min.apply(Math, chartMin));\n      this.chartOptions.hAxis.maxValue = new Date(Math.max.apply(Math, chartMax));\n    }\n  },\n  created: function created() {\n    this.refactorProcess();\n    this.refactorRegistry();\n    this.calcRegistryBeginEndTime();\n    this.calcChartRange();\n\n    for (var i in this.registryData) {\n      this.chartData.push([this.registryData[i].RegistryName, new Date(this.registryData[i].BeginTime), new Date(this.registryData[i].EndTime)]);\n    }\n\n    console.log(this.chartData);\n    console.log(this.chartOptions.hAxis.minValue.getHours());\n  }\n};",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA,OAAA,WAAA;AACA,OAAA,YAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,EADA;AAEA,MAAA,YAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,QAAA,EAAA,EADA;AAEA,UAAA,QAAA,EAAA;AAFA;AADA,OAFA;AAQA,MAAA,WAAA,EAAA,WARA;AASA,MAAA,YAAA,EAAA,YATA;AAUA,MAAA,UAAA,EAAA,CAAA,OAAA,CAVA;AAWA,MAAA,IAAA,EAAA,CAXA;AAYA,MAAA,IAAA,EAAA;AACA,WAAA,KADA;AAEA,WAAA,KAFA;AAGA,WAAA;AAHA;AAZA,KAAA;AAkBA,GApBA;AAqBA,EAAA,OAAA,EAAA,mBAAA;AAAA;;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,OAAA;;AACA,IAAA,QAAA,CAAA,kBAAA,GAAA,YAAA;AACA,UAAA,QAAA,CAAA,UAAA,IAAA,UAAA,EAAA;AACA;AACA,QAAA,KAAA,CAAA,aAAA;AACA;AACA,KALA;AAMA,GA7BA;AA8BA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AAEA,UAAA,OAAA,GAAA,IAAA,MAAA,CAAA,aAAA,CAAA,cAAA,CAAA;AACA,QAAA,WAAA,EAAA,kBADA;AAEA,QAAA,WAAA,EAAA,SAFA;AAGA,QAAA,OAAA,EAAA;AACA;AACA,UAAA,iBAAA,EAAA,CAFA;AAGA,UAAA,EAAA,EAAA;AACA,YAAA,SAAA,EAAA,WADA;AAEA,YAAA,YAAA,EAAA,MAFA;AAGA,YAAA,YAAA,EAAA;AACA,cAAA,KAAA,EAAA,IADA;AAEA,cAAA,MAAA,EAAA,EAFA;AAGA,cAAA,KAAA,EAAA;AACA,gBAAA,MAAA,EAAA,UADA;AAEA,gBAAA,KAAA,EAAA,CACA,KAAA,YAAA,CAAA,KAAA,CAAA,QADA,EAGA,KAAA,YAAA,CAAA,KAAA,CAAA,QAHA;AAFA,eAHA;AAWA,cAAA,SAAA,EAAA;AACA,gBAAA,KAAA,EAAA,KADA;AACA;AACA,gBAAA,MAAA,EAAA;AAFA;AAXA,aAHA;AAmBA,YAAA,SAAA,EAAA;AACA,cAAA,OAAA,EAAA,CAAA,CAAA,EAAA;AACA,gBAAA,IAAA,EAAA,QADA;AAEA,gBAAA,IAAA,EAAA,gBAAA;AAAA,yBAAA,CAAA;AAAA;AAFA,eAAA;AADA;AAnBA;AAHA;AAHA,OAAA,CAAA;AAmCA,UAAA,SAAA,GAAA,IAAA,MAAA,CAAA,aAAA,CAAA,SAAA,CACA,QAAA,CAAA,cAAA,CAAA,WAAA,CADA,CAAA;AAGA,UAAA,KAAA,GAAA,IAAA,MAAA,CAAA,aAAA,CAAA,YAAA,CAAA;AACA,qBAAA,UADA;AAEA,uBAAA,OAFA;AAGA,mBAAA;AACA,mBAAA,IADA;AAEA,oBAAA,GAFA;AAGA,uBAAA;AACA,YAAA,KAAA,EAAA,MADA;AACA;AACA,YAAA,MAAA,EAAA;AAFA,WAHA;AAOA,6BAAA;AAPA,SAHA;AAYA,gBAAA;AACA,qBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AADA;AAZA,OAAA,CAAA;AAkBA,UAAA,IAAA,GAAA,IAAA,MAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,KAAA,SAAA,CAAA;AAEA,MAAA,SAAA,CAAA,IAAA,CAAA,OAAA,EAAA,KAAA;AACA,MAAA,SAAA,CAAA,IAAA,CAAA,IAAA;AACA,KA/DA;AAgEA,IAAA,eAhEA,6BAgEA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,aAAA;AACA,UAAA,WAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,WAAA,EAAA;AACA,YAAA,UAAA,GAAA,EAAA;AACA,YAAA,UAAA,GAAA,EAAA;AACA,YAAA,SAAA,GAAA,EAAA;;AACA,aAAA,IAAA,CAAA,IAAA,KAAA,WAAA,CAAA,CAAA,CAAA,EAAA;AACA,UAAA,UAAA,GAAA,KAAA,WAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA;;AACA,cAAA,WAAA,CAAA,cAAA,CAAA,UAAA,CAAA,EAAA;AACA,YAAA,UAAA,CAAA,CAAA,CAAA,GAAA,KAAA,WAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,YAAA,WAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AACA,WAHA,MAGA;AACA,YAAA,UAAA,CAAA,CAAA,CAAA,GAAA,KAAA,WAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,YAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AACA,YAAA,WAAA,CAAA,UAAA,CAAA,GAAA,SAAA;AACA;;AACA,UAAA,SAAA,GAAA,EAAA;AACA;AACA;;AACA,WAAA,WAAA,GAAA,WAAA;AACA,KArFA;AAsFA,IAAA,gBAtFA,8BAsFA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,sBAAA;AACA,UAAA,YAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,YAAA,EAAA;AACA,YAAA,UAAA,GAAA,EAAA;AACA,YAAA,UAAA,GAAA,EAAA;;AACA,aAAA,IAAA,CAAA,IAAA,KAAA,YAAA,CAAA,CAAA,CAAA,EAAA;AACA,UAAA,UAAA,GAAA,KAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA;AACA,UAAA,UAAA,CAAA,CAAA,CAAA,GAAA,KAAA,YAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,UAAA,YAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA,CAAA,CAAA;AACA;AACA;;AACA,WAAA,YAAA,GAAA,YAAA;AACA,KAnGA;AAoGA,IAAA,wBApGA,sCAoGA;AACA,UAAA,UAAA,GAAA,EAAA;AACA,UAAA,oBAAA,GAAA,EAAA;AACA,UAAA,kBAAA,GAAA,EAAA;;AAEA,WAAA,IAAA,CAAA,IAAA,KAAA,YAAA,EAAA;AACA,QAAA,UAAA,GAAA,CAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,WAAA,CAAA,UAAA,EAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,UAAA,oBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,WAAA,CAAA,UAAA,EAAA,CAAA,EAAA,gBAAA,CAAA;AACA,UAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,WAAA,CAAA,UAAA,EAAA,CAAA,EAAA,cAAA,CAAA;AACA;;AACA,YAAA,oBAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,YAAA,CAAA,UAAA,EAAA,SAAA,GAAA,IAAA,CAAA,GAAA,OAAA,IAAA,qBAAA,oBAAA,EAAA;AAEA;;AACA,YAAA,kBAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,YAAA,CAAA,UAAA,EAAA,OAAA,GAAA,IAAA,CAAA,GAAA,OAAA,IAAA,qBAAA,kBAAA,EAAA;AAEA;;AAEA,QAAA,kBAAA,GAAA,EAAA;AACA,QAAA,oBAAA,GAAA,EAAA;AACA;AACA,KA3HA;AA4HA,IAAA,cA5HA,4BA4HA;AACA,UAAA,QAAA,GAAA,EAAA;AACA,UAAA,QAAA,GAAA,EAAA;;AAEA,WAAA,IAAA,CAAA,IAAA,KAAA,YAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,KAAA,YAAA,CAAA,CAAA,EAAA,SAAA;AACA,QAAA,QAAA,CAAA,IAAA,CAAA,KAAA,YAAA,CAAA,CAAA,EAAA,SAAA;AACA,QAAA,QAAA,CAAA,IAAA,CAAA,KAAA,YAAA,CAAA,CAAA,EAAA,OAAA;AACA;;AAEA,WAAA,YAAA,CAAA,KAAA,CAAA,QAAA,GAAA,IAAA,IAAA,CAAA,IAAA,CAAA,GAAA,OAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACA,WAAA,YAAA,CAAA,KAAA,CAAA,QAAA,GAAA,IAAA,IAAA,CAAA,IAAA,CAAA,GAAA,OAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAEA;AAzIA,GA9BA;AAyKA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,eAAA;AACA,SAAA,gBAAA;AACA,SAAA,wBAAA;AACA,SAAA,cAAA;;AAEA,SAAA,IAAA,CAAA,IAAA,KAAA,YAAA,EAAA;AACA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA,KAAA,YAAA,CAAA,CAAA,EAAA,YAAA,EAAA,IAAA,IAAA,CAAA,KAAA,YAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA,IAAA,IAAA,CAAA,KAAA,YAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA;AACA;;AAEA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,SAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,YAAA,CAAA,KAAA,CAAA,QAAA,CAAA,QAAA,EAAA;AACA;AArLA,CAAA","sourcesContent":["<template>\n  <v-container\n    fill-height\n    fluid\n    grid-list-xl\n  >\n    <v-layout wrap>\n      <v-flex\n        xs10\n        offset-xs1\n      >\n      <div id=\"dashboard\" style=\"width:1200px;\">\n          <div id=\"chart\" style=\"position: relative; width: 1200px; height: 600px; backgroundColor: #ffffff;\"></div>\n          <div id=\"control\"></div>\n      </div>\n      <div id=\"junk_div\" style=\"display: none;\"></div>\n    </v-flex>\n      <v-flex\n        sm6\n        xs12\n        md6\n        lg2\n        offset-lg3\n      >\n        <material-stats-card\n          color=\"green\"\n          icon=\"mdi-check\"\n          title=\"Successful jobs\"\n          value=\"34,245\"\n          sub-icon=\"mdi-calendar\"\n          sub-text=\"Last 24 Hours\"\n        />\n      </v-flex>\n      <v-flex\n        sm6\n        xs12\n        md6\n        lg2\n      >\n        <material-stats-card\n          color=\"orange\"\n          icon=\"mdi-content-copy\"\n          title=\"Storage\"\n          value=\"49/50\"\n          small-value=\"GB\"\n          sub-icon=\"mdi-information\"\n          sub-text=\"Storage nearing capacity.\"\n        />\n      </v-flex>\n      <v-flex\n        sm6\n        xs12\n        md6\n        lg2\n      >\n        <material-stats-card\n          color=\"red\"\n          icon=\"mdi-information-outline\"\n          title=\"Failed jobs\"\n          value=\"75\"\n          sub-icon=\"mdi-alert\"\n          sub-icon-color=\"error\"\n          sub-text=\"Issues needing attention.\"\n        />\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\nimport processData from '../assets/PROCESS.json'\nimport registryData from '../assets/REGISTRY.json'\n\nexport default {\n  data () {\n    return {\n      chartData: [],\n      chartOptions: {\n        hAxis: {\n          minValue: '',\n          maxValue: ''\n        }\n      },\n      processData: processData,\n      registryData: registryData,\n      activeData: [3719751],\n      tabs: 0,\n      list: {\n        0: false,\n        1: false,\n        2: false\n      }\n    }\n  },\n  mounted: function() {\n    console.log(\"hello\");\n    document.onreadystatechange = () => {\n  if (document.readyState == \"complete\") {\n      // run code here\n      this.drawDashboard();\n  }\n}\n  },\n  methods: {\n    drawDashboard() {\n\n                var control = new google.visualization.ControlWrapper({\n    controlType: 'ChartRangeFilter',\n    containerId: 'control',\n    options: {\n        // Filter by the date axis.\n        filterColumnIndex: 1,\n        ui: {\n            chartType: 'LineChart',\n            minRangeSize: 600000,\n            chartOptions: {\n                width: 1200,\n                height: 70,\n                hAxis: {\n                    format: 'hh:mm:ss',\n                    ticks: [\n                        this.chartOptions.hAxis.minValue,\n\n                        this.chartOptions.hAxis.maxValue\n                    ]\n                },\n                chartArea: {\n                  width: '90%', // make sure this is the same for the chart and control so the axes align right\n                  height: '90%'\n                }\n            },\n            chartView: {\n                columns: [1, {\n                    type: 'number',\n                    calc: function () {return 0;}\n                }]\n            }\n        }\n    }\n});\n\nvar dashboard = new google.visualization.Dashboard(\n    document.getElementById('dashboard'));\n\n                var chart = new google.visualization.ChartWrapper({\n                    'chartType': 'Timeline',\n                        'containerId': 'chart',\n                        'options': {\n                        'width': 1200,\n                            'height': 600,\n                            'chartArea': {\n                            width: '100%', // make sure this is the same for the chart and control so the axes align right\n                            height: '100%'\n                        },\n                            'backgroundColor': '#ffd'\n                    },\n                        'view': {\n                        'columns': [0, 1, 2]\n                    }\n\n                });\n\n                var data = new google.visualization.arrayToDataTable(this.chartData);\n\n                dashboard.bind(control, chart);\n                dashboard.draw(data);\n            },\n    refactorProcess() {\n      console.log('in refactor')\n      var tempProcess = {}\n      for (var i in this.processData) {\n        var properties = {}\n        var registryID = ''\n        var tempArray = []\n        for (var j in this.processData[i]) {\n            registryID = this.processData[i][j].RegistryID\n            if (tempProcess.hasOwnProperty(registryID)) {\n              properties[j] = this.processData[i][j]\n              tempProcess[registryID].push(properties[j])\n            } else {\n              properties[j] = this.processData[i][j]\n              tempArray.push(properties[j])\n              tempProcess[registryID] = tempArray\n            }\n            tempArray = []\n        }\n      }\n      this.processData = tempProcess\n    },\n    refactorRegistry() {\n      console.log('in refactor registry')\n      var tempRegistry = {}\n      for (var i in this.registryData) {\n        var properties = {}\n        var registryID = ''\n        for (var j in this.registryData[i]) {\n            registryID = this.registryData[i][j].RegistryID\n            properties[j] = this.registryData[i][j]\n            tempRegistry[registryID] = properties[j]\n        }\n      }\n      this.registryData = tempRegistry\n    },\n    calcRegistryBeginEndTime() {\n      var registryID = ''\n      var minProcessBeginArray = []\n      var maxProcessEndArray = []\n\n      for (var i in this.registryData) {\n        registryID = i\n        for (var j = 0; j < this.processData[registryID].length; j++) {\n          minProcessBeginArray.push(Date.parse(this.processData[registryID][j].ProcessBeginTime))\n          maxProcessEndArray.push(Date.parse(this.processData[registryID][j].ProcessEndTime))\n        }\n        if (minProcessBeginArray.length > 0) {\n          this.registryData[registryID].BeginTime = Math.min(...minProcessBeginArray)\n\n        }\n        if (maxProcessEndArray.length > 0) {\n          this.registryData[registryID].EndTime = Math.max(...maxProcessEndArray)\n\n        }\n\n        maxProcessEndArray = []\n        minProcessBeginArray = []\n      }\n    },\n    calcChartRange() {\n      var chartMin = []\n      var chartMax = []\n\n      for (var i in this.registryData) {\n        console.log(this.registryData[i].BeginTime)\n        chartMin.push(this.registryData[i].BeginTime)\n        chartMax.push(this.registryData[i].EndTime)\n      }\n\n      this.chartOptions.hAxis.minValue = new Date(Math.min(...chartMin))\n      this.chartOptions.hAxis.maxValue = new Date(Math.max(...chartMax))\n\n    }\n  },\n  created: function() {\n    this.refactorProcess()\n    this.refactorRegistry()\n    this.calcRegistryBeginEndTime()\n    this.calcChartRange()\n\n    for (var i in this.registryData) {\n      this.chartData.push([ this.registryData[i].RegistryName, new Date(this.registryData[i].BeginTime), new Date(this.registryData[i].EndTime) ])\n    }\n\n    console.log(this.chartData)\n    console.log(this.chartOptions.hAxis.minValue.getHours())\n  }\n}\n</script>\n<style>\n</style>\n"],"sourceRoot":"src/views"}]}