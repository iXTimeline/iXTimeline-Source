{"remainingRequest":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\src\\views\\Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\src\\views\\Dashboard.vue","mtime":1562823123597},{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\MATTO\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport processData from '../assets/PROCESS.json'\nimport registryData from '../assets/REGISTRY.json'\n\nexport default {\n  data () {\n    return {\n      chartData: [],\n      chartOptions: {\n        hAxis: {\n          minValue: '',\n          maxValue: ''\n        }\n      },\n      processData: processData,\n      registryData: registryData,\n      activeData: [3719751],\n      tabs: 0,\n      list: {\n        0: false,\n        1: false,\n        2: false\n      }\n    }\n  },\n  mounted: function() {\n    console.log(\"hello\");\n    document.onreadystatechange = () => {\n  if (document.readyState == \"complete\") {\n      // run code here\n      this.drawDashboard();\n  }\n}\n  },\n  methods: {\n    drawDashboard() {\n\n                var control = new google.visualization.ControlWrapper({\n    controlType: 'ChartRangeFilter',\n    containerId: 'control',\n    options: {\n        // Filter by the date axis.\n        filterColumnIndex: 1,\n        ui: {\n            chartType: 'LineChart',\n            minRangeSize: 600000,\n            chartOptions: {\n                width: 1200,\n                height: 70,\n                hAxis: {\n                    format: 'hh:mm:ss',\n                    ticks: [\n                        this.chartOptions.hAxis.minValue,\n\n                        this.chartOptions.hAxis.maxValue\n                    ]\n                },\n                chartArea: {\n                  width: '90%', // make sure this is the same for the chart and control so the axes align right\n                  height: '90%'\n                }\n            },\n            chartView: {\n                columns: [1, {\n                    type: 'number',\n                    calc: function () {return 0;}\n                }]\n            }\n        }\n    }\n});\n\nvar dashboard = new google.visualization.Dashboard(\n    document.getElementById('dashboard'));\n\n                var chart = new google.visualization.ChartWrapper({\n                    'chartType': 'Timeline',\n                        'containerId': 'chart',\n                        'options': {\n                        'width': 1200,\n                            'height': 600,\n                            'chartArea': {\n                            width: '100%', // make sure this is the same for the chart and control so the axes align right\n                            height: '100%'\n                        },\n                            'backgroundColor': '#ffd'\n                    },\n                        'view': {\n                        'columns': [0, 1, 2]\n                    }\n\n                });\n\n                var data = new google.visualization.arrayToDataTable(this.chartData);\n\n                dashboard.bind(control, chart);\n                dashboard.draw(data);\n            },\n    refactorProcess() {\n      console.log('in refactor')\n      var tempProcess = {}\n      for (var i in this.processData) {\n        var properties = {}\n        var registryID = ''\n        var tempArray = []\n        for (var j in this.processData[i]) {\n            registryID = this.processData[i][j].RegistryID\n            if (tempProcess.hasOwnProperty(registryID)) {\n              properties[j] = this.processData[i][j]\n              tempProcess[registryID].push(properties[j])\n            } else {\n              properties[j] = this.processData[i][j]\n              tempArray.push(properties[j])\n              tempProcess[registryID] = tempArray\n            }\n            tempArray = []\n        }\n      }\n      this.processData = tempProcess\n    },\n    refactorRegistry() {\n      console.log('in refactor registry')\n      var tempRegistry = {}\n      for (var i in this.registryData) {\n        var properties = {}\n        var registryID = ''\n        for (var j in this.registryData[i]) {\n            registryID = this.registryData[i][j].RegistryID\n            properties[j] = this.registryData[i][j]\n            tempRegistry[registryID] = properties[j]\n        }\n      }\n      this.registryData = tempRegistry\n    },\n    calcRegistryBeginEndTime() {\n      var registryID = ''\n      var minProcessBeginArray = []\n      var maxProcessEndArray = []\n\n      for (var i in this.registryData) {\n        registryID = i\n        for (var j = 0; j < this.processData[registryID].length; j++) {\n          minProcessBeginArray.push(Date.parse(this.processData[registryID][j].ProcessBeginTime))\n          maxProcessEndArray.push(Date.parse(this.processData[registryID][j].ProcessEndTime))\n        }\n        if (minProcessBeginArray.length > 0) {\n          this.registryData[registryID].BeginTime = Math.min(...minProcessBeginArray)\n\n        }\n        if (maxProcessEndArray.length > 0) {\n          this.registryData[registryID].EndTime = Math.max(...maxProcessEndArray)\n\n        }\n\n        maxProcessEndArray = []\n        minProcessBeginArray = []\n      }\n    },\n    calcChartRange() {\n      var chartMin = []\n      var chartMax = []\n\n      for (var i in this.registryData) {\n        console.log(this.registryData[i].BeginTime)\n        chartMin.push(this.registryData[i].BeginTime)\n        chartMax.push(this.registryData[i].EndTime)\n      }\n\n      this.chartOptions.hAxis.minValue = new Date(Math.min(...chartMin))\n      this.chartOptions.hAxis.maxValue = new Date(Math.max(...chartMax))\n\n    }\n  },\n  created: function() {\n    this.refactorProcess()\n    this.refactorRegistry()\n    this.calcRegistryBeginEndTime()\n    this.calcChartRange()\n\n    for (var i in this.registryData) {\n      this.chartData.push([ this.registryData[i].RegistryName, new Date(this.registryData[i].BeginTime), new Date(this.registryData[i].EndTime) ])\n    }\n\n    console.log(this.chartData)\n    console.log(this.chartOptions.hAxis.minValue.getHours())\n  }\n}\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container\n    fill-height\n    fluid\n    grid-list-xl\n  >\n    <v-layout wrap>\n      <v-flex\n        xs10\n        offset-xs1\n      >\n      <div id=\"dashboard\" style=\"width:1200px;\">\n          <div id=\"chart\" style=\"position: relative; width: 1200px; height: 600px; backgroundColor: #ffffff;\"></div>\n          <div id=\"control\"></div>\n      </div>\n      <div id=\"junk_div\" style=\"display: none;\"></div>\n    </v-flex>\n      <v-flex\n        sm6\n        xs12\n        md6\n        lg2\n        offset-lg3\n      >\n        <material-stats-card\n          color=\"green\"\n          icon=\"mdi-check\"\n          title=\"Successful jobs\"\n          value=\"34,245\"\n          sub-icon=\"mdi-calendar\"\n          sub-text=\"Last 24 Hours\"\n        />\n      </v-flex>\n      <v-flex\n        sm6\n        xs12\n        md6\n        lg2\n      >\n        <material-stats-card\n          color=\"orange\"\n          icon=\"mdi-content-copy\"\n          title=\"Storage\"\n          value=\"49/50\"\n          small-value=\"GB\"\n          sub-icon=\"mdi-information\"\n          sub-text=\"Storage nearing capacity.\"\n        />\n      </v-flex>\n      <v-flex\n        sm6\n        xs12\n        md6\n        lg2\n      >\n        <material-stats-card\n          color=\"red\"\n          icon=\"mdi-information-outline\"\n          title=\"Failed jobs\"\n          value=\"75\"\n          sub-icon=\"mdi-alert\"\n          sub-icon-color=\"error\"\n          sub-text=\"Issues needing attention.\"\n        />\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\nimport processData from '../assets/PROCESS.json'\nimport registryData from '../assets/REGISTRY.json'\n\nexport default {\n  data () {\n    return {\n      chartData: [],\n      chartOptions: {\n        hAxis: {\n          minValue: '',\n          maxValue: ''\n        }\n      },\n      processData: processData,\n      registryData: registryData,\n      activeData: [3719751],\n      tabs: 0,\n      list: {\n        0: false,\n        1: false,\n        2: false\n      }\n    }\n  },\n  mounted: function() {\n    console.log(\"hello\");\n    document.onreadystatechange = () => {\n  if (document.readyState == \"complete\") {\n      // run code here\n      this.drawDashboard();\n  }\n}\n  },\n  methods: {\n    drawDashboard() {\n\n                var control = new google.visualization.ControlWrapper({\n    controlType: 'ChartRangeFilter',\n    containerId: 'control',\n    options: {\n        // Filter by the date axis.\n        filterColumnIndex: 1,\n        ui: {\n            chartType: 'LineChart',\n            minRangeSize: 600000,\n            chartOptions: {\n                width: 1200,\n                height: 70,\n                hAxis: {\n                    format: 'hh:mm:ss',\n                    ticks: [\n                        this.chartOptions.hAxis.minValue,\n\n                        this.chartOptions.hAxis.maxValue\n                    ]\n                },\n                chartArea: {\n                  width: '90%', // make sure this is the same for the chart and control so the axes align right\n                  height: '90%'\n                }\n            },\n            chartView: {\n                columns: [1, {\n                    type: 'number',\n                    calc: function () {return 0;}\n                }]\n            }\n        }\n    }\n});\n\nvar dashboard = new google.visualization.Dashboard(\n    document.getElementById('dashboard'));\n\n                var chart = new google.visualization.ChartWrapper({\n                    'chartType': 'Timeline',\n                        'containerId': 'chart',\n                        'options': {\n                        'width': 1200,\n                            'height': 600,\n                            'chartArea': {\n                            width: '100%', // make sure this is the same for the chart and control so the axes align right\n                            height: '100%'\n                        },\n                            'backgroundColor': '#ffd'\n                    },\n                        'view': {\n                        'columns': [0, 1, 2]\n                    }\n\n                });\n\n                var data = new google.visualization.arrayToDataTable(this.chartData);\n\n                dashboard.bind(control, chart);\n                dashboard.draw(data);\n            },\n    refactorProcess() {\n      console.log('in refactor')\n      var tempProcess = {}\n      for (var i in this.processData) {\n        var properties = {}\n        var registryID = ''\n        var tempArray = []\n        for (var j in this.processData[i]) {\n            registryID = this.processData[i][j].RegistryID\n            if (tempProcess.hasOwnProperty(registryID)) {\n              properties[j] = this.processData[i][j]\n              tempProcess[registryID].push(properties[j])\n            } else {\n              properties[j] = this.processData[i][j]\n              tempArray.push(properties[j])\n              tempProcess[registryID] = tempArray\n            }\n            tempArray = []\n        }\n      }\n      this.processData = tempProcess\n    },\n    refactorRegistry() {\n      console.log('in refactor registry')\n      var tempRegistry = {}\n      for (var i in this.registryData) {\n        var properties = {}\n        var registryID = ''\n        for (var j in this.registryData[i]) {\n            registryID = this.registryData[i][j].RegistryID\n            properties[j] = this.registryData[i][j]\n            tempRegistry[registryID] = properties[j]\n        }\n      }\n      this.registryData = tempRegistry\n    },\n    calcRegistryBeginEndTime() {\n      var registryID = ''\n      var minProcessBeginArray = []\n      var maxProcessEndArray = []\n\n      for (var i in this.registryData) {\n        registryID = i\n        for (var j = 0; j < this.processData[registryID].length; j++) {\n          minProcessBeginArray.push(Date.parse(this.processData[registryID][j].ProcessBeginTime))\n          maxProcessEndArray.push(Date.parse(this.processData[registryID][j].ProcessEndTime))\n        }\n        if (minProcessBeginArray.length > 0) {\n          this.registryData[registryID].BeginTime = Math.min(...minProcessBeginArray)\n\n        }\n        if (maxProcessEndArray.length > 0) {\n          this.registryData[registryID].EndTime = Math.max(...maxProcessEndArray)\n\n        }\n\n        maxProcessEndArray = []\n        minProcessBeginArray = []\n      }\n    },\n    calcChartRange() {\n      var chartMin = []\n      var chartMax = []\n\n      for (var i in this.registryData) {\n        console.log(this.registryData[i].BeginTime)\n        chartMin.push(this.registryData[i].BeginTime)\n        chartMax.push(this.registryData[i].EndTime)\n      }\n\n      this.chartOptions.hAxis.minValue = new Date(Math.min(...chartMin))\n      this.chartOptions.hAxis.maxValue = new Date(Math.max(...chartMax))\n\n    }\n  },\n  created: function() {\n    this.refactorProcess()\n    this.refactorRegistry()\n    this.calcRegistryBeginEndTime()\n    this.calcChartRange()\n\n    for (var i in this.registryData) {\n      this.chartData.push([ this.registryData[i].RegistryName, new Date(this.registryData[i].BeginTime), new Date(this.registryData[i].EndTime) ])\n    }\n\n    console.log(this.chartData)\n    console.log(this.chartOptions.hAxis.minValue.getHours())\n  }\n}\n</script>\n<style>\n</style>\n"]}]}