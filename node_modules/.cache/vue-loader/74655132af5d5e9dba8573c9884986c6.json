{"remainingRequest":"C:\\Users\\matthew.argao\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\matthew.argao\\Documents\\GitHub\\iXTimeline-Source\\src\\views\\Dashboard - Copy.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\matthew.argao\\Documents\\GitHub\\iXTimeline-Source\\src\\views\\Dashboard - Copy.vue","mtime":1562896867188},{"path":"C:\\Users\\matthew.argao\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1562854784048},{"path":"C:\\Users\\matthew.argao\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\babel-loader\\lib\\index.js","mtime":1562854783619},{"path":"C:\\Users\\matthew.argao\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1562854784048},{"path":"C:\\Users\\matthew.argao\\Documents\\GitHub\\iXTimeline-Source\\node_modules\\vue-loader\\lib\\index.js","mtime":1562854798254}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport processData from '../assets/PROCESS.json'\r\nimport registryData from '../assets/REGISTRY.json'\r\nimport parentRegistryData from '../assets/ParentRegistries.json'\r\nimport childRegistryData from '../assets/ChildRegistries.json'\r\nimport parentProcessData from '../assets/PROCESS.json'\r\nimport childProcessData from '../assets/ChildProcess.json'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      filters: {\r\n        itemtype: {\r\n          account: false,\r\n          audit: false,\r\n          bill: false,\r\n          business_alert: false,\r\n          CDR_file: false,\r\n          connect: false,\r\n          cycle: false,\r\n          data_file: false,\r\n          database: false,\r\n          external_data_warehouse: false,\r\n          extract: false,\r\n          finance: false,\r\n          import_export: false,\r\n          infrastructure_test: false,\r\n          ixinsight: false,\r\n          notification: false,\r\n          performance_metric: false,\r\n          route_guide: false,\r\n          standardized_CDR: false,\r\n          switch_upload: false,\r\n          system_audit: false,\r\n          trade: false,\r\n          write_off: false\r\n        }\r\n      },\r\n      itemTypes: [\r\n        'All',\r\n        'Account',\r\n        'Audit',\r\n        'Bill',\r\n        'Business Alert',\r\n        'CDR File',\r\n        'Connect',\r\n        'Cycle',\r\n        'Data File',\r\n        'Database',\r\n        'External Data Warehouse',\r\n        'Extract',\r\n        'Finance',\r\n        'Import/Export',\r\n        'Infrastructure Test',\r\n        'iXInsight',\r\n        'Notification',\r\n        'Performance Metric',\r\n        'Route Guide',\r\n        'Standardized CDR',\r\n        'Switch Upload',\r\n        'System Audit',\r\n        'Trade',\r\n        'Write Off'\r\n      ],\r\n      databases: [\r\n        'ixAdmin_Audit',\r\n        'ixAdmin_Main',\r\n        'ixAdmin_Port',\r\n        'ixAdmin_Report',\r\n        'ixAlert_Audit',\r\n        'ixAlert_Main',\r\n        'ixAlert_Mart',\r\n        'ixAudit_Audit',\r\n        'ixAudit_Main',\r\n        'ixAudit_Port',\r\n        'ixControl_Audit',\r\n        'ixControl_Client',\r\n        'ixControl_Main',\r\n        'ixControl_Port',\r\n        'ixControl_Report',\r\n        'ixControl_Utilities',\r\n        'ixCore_Audit',\r\n        'ixCore_Main',\r\n        'ixCore_Port',\r\n        'ixMart',\r\n        'ixReport_Audit',\r\n        'ixReport_Main',\r\n        'ixReport_Port',\r\n        'ixRoute_Audit',\r\n        'ixRoute_Main',\r\n        'ixRoute_Port',\r\n        'ixRoute_Report',\r\n        'ixSubscription_Main',\r\n        'ixSum',\r\n        'ixTrade_Main',\r\n        'ixTrade_Port',\r\n        'ixTrade_Audit',\r\n        'ixAEP',\r\n        'ixTranslate_Main',\r\n        'ixTranslate_Port',\r\n        'ixBill_Audit',\r\n        'ixBill_Main',\r\n        'ixBill_Port',\r\n        'ixAudit_Report',\r\n        'ixCDR_01',\r\n        'ixCDR_02',\r\n        'ixCDR_03',\r\n        'ixCDR_04',\r\n        'ixCDR_05',\r\n        'ixCDR_06',\r\n        'ixCDR_07',\r\n        'ixCDR_08',\r\n        'ixCDR_nnn',\r\n        'ixTemp',\r\n        'ixTranslate_Audit',\r\n        'ixUpload_Main',\r\n        'ixFinance_Main',\r\n        'ixFinance_Port_FT',\r\n        'ixQOS',\r\n        'ixInsight_Main',\r\n        'ixInsight_Mart',\r\n        'ixFinance_Audit',\r\n        'ixFinance_Port_ATT',\r\n        'ixFinance_Port',\r\n        'ixArchive',\r\n        'ixMart_CDR',\r\n        'ixDataLoader_INCR',\r\n        'ixDataLoader_INIT',\r\n        'ixDataLoader_Main',\r\n        'ixSubscriber_Main',\r\n        'ixSubscriber_Audit'\r\n      ],\r\n      servers: [\r\n        'Coreserver',\r\n        'Reportserver',\r\n        'Batchserver',\r\n        'CDRServer01',\r\n        'CDRServer02'\r\n      ],\r\n      drawTimeline: true,\r\n      selectedDate: '2019-06-01',\r\n      displayCalendar: false,\r\n      isLoading: true,\r\n      activeItemTypeFilters: [],\r\n      activeDatabaseFilters: [],\r\n      activeServerFilters: [],\r\n      chartData: [],\r\n      parentRegistryData: parentRegistryData,\r\n      childRegistryData: childRegistryData,\r\n      parentProcessData: parentProcessData,\r\n      childProcessData: childProcessData,\r\n      chartOptions: {\r\n        hAxis: {\r\n          minValue: new Date('2019-06-01'),\r\n          maxValue: new Date('2019-06-02')\r\n        }\r\n      },\r\n      processData: processData,\r\n      registryData: registryData,\r\n      activeData: [3719751],\r\n      tabs: 0,\r\n      list: {\r\n        0: false,\r\n        1: false,\r\n        2: false\r\n      }\r\n    }\r\n  },\r\n  mounted: function() {\r\n    document.onreadystatechange = () => {\r\n  if (document.readyState == \"complete\") {\r\n      // run code here\r\n      //this.drawDashboard();\r\n  }\r\n}\r\n  },\r\n  watch: {\r\n    isLoading: function() {\r\n      this.drawDashboard();\r\n    }\r\n  },\r\n  methods: {\r\n    drawDashboard() {\r\n      var chart1 = new google.visualization.Timeline(document.getElementById('chart'));\r\n      //var data = new google.visualization.arrayToDataTable(this.chartData);\r\n\r\n      var data1 = new google.visualization.DataTable();\r\n\r\n     data1.addColumn({ type: 'string', id: 'Process' });\r\n     data1.addColumn({ type: 'string', id: 'Runtime' });\r\n     data1.addColumn({ type: 'date', id: 'Start' });\r\n     data1.addColumn({ type: 'date', id: 'End' });\r\n     data1.addColumn({ type: 'string', role: 'tooltip'});\r\n     data1.addRows(this.chartData);\r\n\r\n     var options1 = {\r\n       chartArea: {\r\n         left: 40,\r\n         width: '100%',\r\n       },\r\n       timeline: {\r\n         showBarLabels: false,\r\n       },\r\n       width: '100%',\r\n       height: 600,\r\n     };\r\n\r\n     google.visualization.events.addListener(chart1, 'select', function () {\r\n       var selection = chart1.getSelection();\r\n       if (selection.length > 0) {\r\n         console.log(data1.getValue(selection[0].row, 4));\r\n       }\r\n     });\r\n\r\n      //dashboard.bind(control, chart);\r\n      chart1.draw(data1,options1);\r\n\r\n            },\r\n    refactorParentProcess() {\r\n      console.log('in refactor parent process')\r\n      this.isLoading = true\r\n      var tempProcess = {}\r\n      var properties = {}\r\n      var tempObj = {}\r\n      var registryID = ''\r\n      var tempArray = []\r\n      for (var i in this.parentProcessData) {\r\n        properties = {}\r\n        tempObj = {}\r\n        registryID = this.parentProcessData[i].RegistryID\r\n        tempProcess[registryID] = []\r\n        for (var j in this.parentProcessData[i]) {\r\n          if (tempProcess.hasOwnProperty(registryID)) {\r\n            properties[j] = this.parentProcessData[i][j]\r\n            tempObj[j] = properties[j]\r\n          } else {\r\n            properties[j] = this.parentProcessData[i][j]\r\n            tempArray.push(properties[j])\r\n            tempProcess[registryID] = tempArray\r\n          }\r\n        }\r\n        tempProcess[registryID].push(tempObj)\r\n      }\r\n      this.parentProcessData = tempProcess\r\n      this.isLoading = false\r\n      console.log('out refactor parent process')\r\n    },\r\n    refactorChildProcess() {\r\n      console.log('in refactor child process')\r\n      this.isLoading = true\r\n      var tempProcess = {}\r\n      var properties = {}\r\n      var tempObj = {}\r\n      var registryID = ''\r\n      var tempArray = []\r\n      for (var i in this.childProcessData) {\r\n        properties = {}\r\n        registryID = this.childProcessData[i].RegistryID\r\n        tempProcess[registryID] = []\r\n        for (var j in this.childProcessData[i]) {\r\n          if (tempProcess.hasOwnProperty(registryID)) {\r\n            properties[j] = this.childProcessData[i][j]\r\n            tempObj[j] = properties[j]\r\n          } else {\r\n            properties[j] = this.childProcessData[i][j]\r\n            tempArray.push(properties[j])\r\n            tempProcess[registryID] = tempArray\r\n          }\r\n        }\r\n        tempProcess[registryID].push(tempObj)\r\n      }\r\n      this.childProcessData = tempProcess\r\n      this.isLoading = false\r\n      console.log('out refactor child process')\r\n    },\r\n    refactorParentRegistry() {\r\n      this.isLoading = true\r\n      var tempRegistry = {}\r\n      var properties = {}\r\n      var registryID = ''\r\n      for (var i in this.parentRegistryData) {\r\n        properties = {}\r\n        registryID = this.parentRegistryData[i].RegistryID\r\n        tempRegistry[registryID] = {}\r\n        for (var j in this.parentRegistryData[i]) {\r\n            properties[j] = this.parentRegistryData[i][j]\r\n            tempRegistry[registryID][j] = properties[j]\r\n        }\r\n      }\r\n      this.parentRegistryData = tempRegistry\r\n      this.isLoading = false\r\n    },\r\n    refactorChildRegistry() {\r\n      this.isLoading = true\r\n      var tempRegistry = {}\r\n      var properties = {}\r\n      var registryID = ''\r\n      for (var i in this.childRegistryData) {\r\n        properties = {}\r\n        registryID = this.childRegistryData[i].RegistryID\r\n        tempRegistry[registryID] = {}\r\n        for (var j in this.childRegistryData[i]) {\r\n            properties[j] = this.childRegistryData[i][j]\r\n            tempRegistry[registryID][j] = properties[j]\r\n        }\r\n      }\r\n      this.childRegistryData = tempRegistry\r\n      this.isLoading = false\r\n    },\r\n    calcRegistryBeginEndTime() {\r\n      var registryID = ''\r\n      var minProcessBeginArray = []\r\n      var maxProcessEndArray = []\r\n\r\n      for (var i in this.registryData) {\r\n        registryID = i\r\n        for (var j = 0; j < this.processData[registryID].length; j++) {\r\n          minProcessBeginArray.push(Date.parse(this.processData[registryID][j].ProcessBeginTime))\r\n          maxProcessEndArray.push(Date.parse(this.processData[registryID][j].ProcessEndTime))\r\n        }\r\n        if (minProcessBeginArray.length > 0) {\r\n          this.registryData[registryID].BeginTime = Math.min(...minProcessBeginArray)\r\n\r\n        }\r\n        if (maxProcessEndArray.length > 0) {\r\n          this.registryData[registryID].EndTime = Math.max(...maxProcessEndArray)\r\n\r\n        }\r\n\r\n        maxProcessEndArray = []\r\n        minProcessBeginArray = []\r\n      }\r\n    },\r\n    calcChartRange() {\r\n      var chartMin = []\r\n      var chartMax = []\r\n\r\n      for (var i in this.parentProcessData) {\r\n        for (var j in this.parentProcessData[i]){\r\n          chartMin.push(this.parentProcessData[i][j].ProcessBeginTime)\r\n          chartMax.push(this.parentProcessData[i][j].ProcessEndTime)\r\n        }\r\n      }\r\n\r\n      this.chartOptions.hAxis.minValue = new Date(Math.min(...chartMin))\r\n      this.chartOptions.hAxis.maxValue = new Date(Math.max(...chartMax))\r\n\r\n    },\r\n    resetFilters() {\r\n      this.activeServerFilters = []\r\n      this.activeItemTypeFilters = []\r\n      this.activeDatabaseFilters = []\r\n    }\r\n  },\r\n  created: function() {\r\n    this.isLoading = true\r\n    //this.refactorParentRegistry()\r\n    //this.refactorChildRegistry()\r\n    this.refactorParentProcess()\r\n    this.refactorChildProcess()\r\n    //this.calcChartRange()\r\n\r\n    //console.log(this.parentProcessData[6405640])\r\n\r\n    console.log(this.parentProcessData)\r\n\r\n    for (var i in this.parentProcessData) {\r\n\r\n      for (var j in this.parentProcessData[i]) {\r\n        //console.log(this.parentProcessData[i][j].Process)\r\n        this.chartData.push([ this.parentProcessData[i][j].Process, String(this.parentProcessData[i][j].ProcessID), new Date(this.parentProcessData[i][j].ProcessBeginTime), new Date(this.parentProcessData[i][j].ProcessEndTime), String(this.parentProcessData[i][j].ProcessID) ])\r\n     }\r\n    }\r\n    //console.log(this.chartData)\r\n    this.isLoading = false\r\n    console.log(this.chartData)\r\n  }\r\n}\r\n",{"version":3,"sources":["Dashboard - Copy.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dashboard - Copy.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <v-container\r\n    fill-height\r\n    fluid\r\n    grid-list-xl\r\n  >\r\n  <v-toolbar\r\n      color=\"purple darken-1\"\r\n      dark\r\n      fixed\r\n      app\r\n      clipped-right\r\n    >\r\n      <v-toolbar-title\r\n        class=\"font-italic display-2\"\r\n      >iXTimeline</v-toolbar-title>\r\n      <v-spacer></v-spacer>\r\n</v-toolbar>\r\n  <v-navigation-drawer\r\n      fixed\r\n      right\r\n      clipped\r\n      app\r\n      width=\"460\"\r\n    >\r\n    <v-list>\r\n      <v-list-tile class='headertile'>\r\n        <v-list-tile-content>\r\n            <v-list-tile-title>FILTERS</v-list-tile-title>\r\n          </v-list-tile-content>\r\n      </v-list-tile>\r\n      <v-flex xs12 px-3>\r\n        <v-list-tile-content style=\"min-width: 500px;\">\r\n        <v-select\r\n          :items=\"itemTypes\"\r\n          label=\"Item Type\"\r\n          chips\r\n          deletable-chips\r\n          multiple\r\n          clearable\r\n          v-model=\"activeItemTypeFilters\"\r\n          style=\"min-width: 425px; max-width: 425px\"\r\n        ></v-select>\r\n        </v-list-tile-content>\r\n      </v-flex>\r\n      <v-flex xs12 px-3>\r\n        <v-list-tile-content style=\"min-width: 500px;\">\r\n        <v-select\r\n          :items=\"databases\"\r\n          label=\"Database\"\r\n          chips\r\n          deletable-chips\r\n          multiple\r\n          clearable\r\n          v-model=\"activeDatabaseFilters\"\r\n          style=\"min-width: 425px; max-width: 425px\"\r\n        ></v-select>\r\n        </v-list-tile-content>\r\n      </v-flex>\r\n      <v-flex xs12 px-3>\r\n        <v-list-tile-content style=\"min-width: 500px;\">\r\n        <v-select\r\n          :items=\"servers\"\r\n          label=\"Server\"\r\n          chips\r\n          deletable-chips\r\n          multiple\r\n          clearable\r\n          v-model=\"activeServerFilters\"\r\n          style=\"min-width: 425px; max-width: 425px\"\r\n        ></v-select>\r\n        </v-list-tile-content>\r\n      </v-flex>\r\n      <v-layout row pl-3 style=\"position: absolute; bottom:20px\">\r\n        <v-flex xs4 offset-xs2 mr-5>\r\n          <v-btn color=\"success\">Apply</v-btn>\r\n        </v-flex>\r\n        <v-flex xs4 ml-5>\r\n          <v-btn color=\"error\" @click=\"resetFilters()\">Clear All</v-btn>\r\n        </v-flex>\r\n        <v-spacer/>\r\n    </v-layout>\r\n    </v-list>\r\n\r\n\r\n\r\n\r\n        {{ activeItemTypeFilters }}\r\n          {{ activeDatabaseFilters }}\r\n            {{ activeServerFilters }}\r\n</v-navigation-drawer>\r\n\r\n    <v-layout wrap>\r\n    <v-flex xs11 offset-xs1 class=\"display-2\">\r\n          <span pr-0>{{selectedDate}}</span>\r\n          <v-menu offset-y>\r\n            <template v-slot:activator=\"{ on }\">\r\n              <v-btn\r\n                color=\"primary\"\r\n                dark\r\n                flat\r\n                icon\r\n                v-on=\"on\"\r\n              ><v-icon>calendar_today</v-icon>\r\n              </v-btn>\r\n            </template>\r\n                  <v-date-picker v-model=\"selectedDate\" landscape reactive></v-date-picker>\r\n          </v-menu>\r\n    </v-flex>\r\n      <v-flex\r\n        xs10\r\n        offset-xs1\r\n        v-if=\"drawTimeline\"\r\n      >\r\n      <div id=\"dashboard\" style=\"width:1200px;\">\r\n          <div id=\"chart\" style=\"position: relative; width: 1200px; height: 600px; backgroundColor: #ffffff;\"></div>\r\n          <div id=\"control\"></div>\r\n      </div>\r\n      <div id=\"junk_div\" style=\"display: none;\"></div>\r\n    </v-flex>\r\n    <v-spacer/>\r\n    <v-flex\r\n      xs10\r\n      offset-xs1\r\n      v-if=\"!drawTimeline\"\r\n    >\r\n      <v-card color=\"red lighten-1\">\r\n        <v-card-text>\r\n          <v-icon dark>report_problem</v-icon> <span class=\"white--text pl-3\" >No results found.</span>\r\n        </v-card-text>\r\n      </v-card>\r\n    </v-flex>\r\n    <v-spacer/>\r\n    </v-layout>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport processData from '../assets/PROCESS.json'\r\nimport registryData from '../assets/REGISTRY.json'\r\nimport parentRegistryData from '../assets/ParentRegistries.json'\r\nimport childRegistryData from '../assets/ChildRegistries.json'\r\nimport parentProcessData from '../assets/PROCESS.json'\r\nimport childProcessData from '../assets/ChildProcess.json'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      filters: {\r\n        itemtype: {\r\n          account: false,\r\n          audit: false,\r\n          bill: false,\r\n          business_alert: false,\r\n          CDR_file: false,\r\n          connect: false,\r\n          cycle: false,\r\n          data_file: false,\r\n          database: false,\r\n          external_data_warehouse: false,\r\n          extract: false,\r\n          finance: false,\r\n          import_export: false,\r\n          infrastructure_test: false,\r\n          ixinsight: false,\r\n          notification: false,\r\n          performance_metric: false,\r\n          route_guide: false,\r\n          standardized_CDR: false,\r\n          switch_upload: false,\r\n          system_audit: false,\r\n          trade: false,\r\n          write_off: false\r\n        }\r\n      },\r\n      itemTypes: [\r\n        'All',\r\n        'Account',\r\n        'Audit',\r\n        'Bill',\r\n        'Business Alert',\r\n        'CDR File',\r\n        'Connect',\r\n        'Cycle',\r\n        'Data File',\r\n        'Database',\r\n        'External Data Warehouse',\r\n        'Extract',\r\n        'Finance',\r\n        'Import/Export',\r\n        'Infrastructure Test',\r\n        'iXInsight',\r\n        'Notification',\r\n        'Performance Metric',\r\n        'Route Guide',\r\n        'Standardized CDR',\r\n        'Switch Upload',\r\n        'System Audit',\r\n        'Trade',\r\n        'Write Off'\r\n      ],\r\n      databases: [\r\n        'ixAdmin_Audit',\r\n        'ixAdmin_Main',\r\n        'ixAdmin_Port',\r\n        'ixAdmin_Report',\r\n        'ixAlert_Audit',\r\n        'ixAlert_Main',\r\n        'ixAlert_Mart',\r\n        'ixAudit_Audit',\r\n        'ixAudit_Main',\r\n        'ixAudit_Port',\r\n        'ixControl_Audit',\r\n        'ixControl_Client',\r\n        'ixControl_Main',\r\n        'ixControl_Port',\r\n        'ixControl_Report',\r\n        'ixControl_Utilities',\r\n        'ixCore_Audit',\r\n        'ixCore_Main',\r\n        'ixCore_Port',\r\n        'ixMart',\r\n        'ixReport_Audit',\r\n        'ixReport_Main',\r\n        'ixReport_Port',\r\n        'ixRoute_Audit',\r\n        'ixRoute_Main',\r\n        'ixRoute_Port',\r\n        'ixRoute_Report',\r\n        'ixSubscription_Main',\r\n        'ixSum',\r\n        'ixTrade_Main',\r\n        'ixTrade_Port',\r\n        'ixTrade_Audit',\r\n        'ixAEP',\r\n        'ixTranslate_Main',\r\n        'ixTranslate_Port',\r\n        'ixBill_Audit',\r\n        'ixBill_Main',\r\n        'ixBill_Port',\r\n        'ixAudit_Report',\r\n        'ixCDR_01',\r\n        'ixCDR_02',\r\n        'ixCDR_03',\r\n        'ixCDR_04',\r\n        'ixCDR_05',\r\n        'ixCDR_06',\r\n        'ixCDR_07',\r\n        'ixCDR_08',\r\n        'ixCDR_nnn',\r\n        'ixTemp',\r\n        'ixTranslate_Audit',\r\n        'ixUpload_Main',\r\n        'ixFinance_Main',\r\n        'ixFinance_Port_FT',\r\n        'ixQOS',\r\n        'ixInsight_Main',\r\n        'ixInsight_Mart',\r\n        'ixFinance_Audit',\r\n        'ixFinance_Port_ATT',\r\n        'ixFinance_Port',\r\n        'ixArchive',\r\n        'ixMart_CDR',\r\n        'ixDataLoader_INCR',\r\n        'ixDataLoader_INIT',\r\n        'ixDataLoader_Main',\r\n        'ixSubscriber_Main',\r\n        'ixSubscriber_Audit'\r\n      ],\r\n      servers: [\r\n        'Coreserver',\r\n        'Reportserver',\r\n        'Batchserver',\r\n        'CDRServer01',\r\n        'CDRServer02'\r\n      ],\r\n      drawTimeline: true,\r\n      selectedDate: '2019-06-01',\r\n      displayCalendar: false,\r\n      isLoading: true,\r\n      activeItemTypeFilters: [],\r\n      activeDatabaseFilters: [],\r\n      activeServerFilters: [],\r\n      chartData: [],\r\n      parentRegistryData: parentRegistryData,\r\n      childRegistryData: childRegistryData,\r\n      parentProcessData: parentProcessData,\r\n      childProcessData: childProcessData,\r\n      chartOptions: {\r\n        hAxis: {\r\n          minValue: new Date('2019-06-01'),\r\n          maxValue: new Date('2019-06-02')\r\n        }\r\n      },\r\n      processData: processData,\r\n      registryData: registryData,\r\n      activeData: [3719751],\r\n      tabs: 0,\r\n      list: {\r\n        0: false,\r\n        1: false,\r\n        2: false\r\n      }\r\n    }\r\n  },\r\n  mounted: function() {\r\n    document.onreadystatechange = () => {\r\n  if (document.readyState == \"complete\") {\r\n      // run code here\r\n      //this.drawDashboard();\r\n  }\r\n}\r\n  },\r\n  watch: {\r\n    isLoading: function() {\r\n      this.drawDashboard();\r\n    }\r\n  },\r\n  methods: {\r\n    drawDashboard() {\r\n      var chart1 = new google.visualization.Timeline(document.getElementById('chart'));\r\n      //var data = new google.visualization.arrayToDataTable(this.chartData);\r\n\r\n      var data1 = new google.visualization.DataTable();\r\n\r\n     data1.addColumn({ type: 'string', id: 'Process' });\r\n     data1.addColumn({ type: 'string', id: 'Runtime' });\r\n     data1.addColumn({ type: 'date', id: 'Start' });\r\n     data1.addColumn({ type: 'date', id: 'End' });\r\n     data1.addColumn({ type: 'string', role: 'tooltip'});\r\n     data1.addRows(this.chartData);\r\n\r\n     var options1 = {\r\n       chartArea: {\r\n         left: 40,\r\n         width: '100%',\r\n       },\r\n       timeline: {\r\n         showBarLabels: false,\r\n       },\r\n       width: '100%',\r\n       height: 600,\r\n     };\r\n\r\n     google.visualization.events.addListener(chart1, 'select', function () {\r\n       var selection = chart1.getSelection();\r\n       if (selection.length > 0) {\r\n         console.log(data1.getValue(selection[0].row, 4));\r\n       }\r\n     });\r\n\r\n      //dashboard.bind(control, chart);\r\n      chart1.draw(data1,options1);\r\n\r\n            },\r\n    refactorParentProcess() {\r\n      console.log('in refactor parent process')\r\n      this.isLoading = true\r\n      var tempProcess = {}\r\n      var properties = {}\r\n      var tempObj = {}\r\n      var registryID = ''\r\n      var tempArray = []\r\n      for (var i in this.parentProcessData) {\r\n        properties = {}\r\n        tempObj = {}\r\n        registryID = this.parentProcessData[i].RegistryID\r\n        tempProcess[registryID] = []\r\n        for (var j in this.parentProcessData[i]) {\r\n          if (tempProcess.hasOwnProperty(registryID)) {\r\n            properties[j] = this.parentProcessData[i][j]\r\n            tempObj[j] = properties[j]\r\n          } else {\r\n            properties[j] = this.parentProcessData[i][j]\r\n            tempArray.push(properties[j])\r\n            tempProcess[registryID] = tempArray\r\n          }\r\n        }\r\n        tempProcess[registryID].push(tempObj)\r\n      }\r\n      this.parentProcessData = tempProcess\r\n      this.isLoading = false\r\n      console.log('out refactor parent process')\r\n    },\r\n    refactorChildProcess() {\r\n      console.log('in refactor child process')\r\n      this.isLoading = true\r\n      var tempProcess = {}\r\n      var properties = {}\r\n      var tempObj = {}\r\n      var registryID = ''\r\n      var tempArray = []\r\n      for (var i in this.childProcessData) {\r\n        properties = {}\r\n        registryID = this.childProcessData[i].RegistryID\r\n        tempProcess[registryID] = []\r\n        for (var j in this.childProcessData[i]) {\r\n          if (tempProcess.hasOwnProperty(registryID)) {\r\n            properties[j] = this.childProcessData[i][j]\r\n            tempObj[j] = properties[j]\r\n          } else {\r\n            properties[j] = this.childProcessData[i][j]\r\n            tempArray.push(properties[j])\r\n            tempProcess[registryID] = tempArray\r\n          }\r\n        }\r\n        tempProcess[registryID].push(tempObj)\r\n      }\r\n      this.childProcessData = tempProcess\r\n      this.isLoading = false\r\n      console.log('out refactor child process')\r\n    },\r\n    refactorParentRegistry() {\r\n      this.isLoading = true\r\n      var tempRegistry = {}\r\n      var properties = {}\r\n      var registryID = ''\r\n      for (var i in this.parentRegistryData) {\r\n        properties = {}\r\n        registryID = this.parentRegistryData[i].RegistryID\r\n        tempRegistry[registryID] = {}\r\n        for (var j in this.parentRegistryData[i]) {\r\n            properties[j] = this.parentRegistryData[i][j]\r\n            tempRegistry[registryID][j] = properties[j]\r\n        }\r\n      }\r\n      this.parentRegistryData = tempRegistry\r\n      this.isLoading = false\r\n    },\r\n    refactorChildRegistry() {\r\n      this.isLoading = true\r\n      var tempRegistry = {}\r\n      var properties = {}\r\n      var registryID = ''\r\n      for (var i in this.childRegistryData) {\r\n        properties = {}\r\n        registryID = this.childRegistryData[i].RegistryID\r\n        tempRegistry[registryID] = {}\r\n        for (var j in this.childRegistryData[i]) {\r\n            properties[j] = this.childRegistryData[i][j]\r\n            tempRegistry[registryID][j] = properties[j]\r\n        }\r\n      }\r\n      this.childRegistryData = tempRegistry\r\n      this.isLoading = false\r\n    },\r\n    calcRegistryBeginEndTime() {\r\n      var registryID = ''\r\n      var minProcessBeginArray = []\r\n      var maxProcessEndArray = []\r\n\r\n      for (var i in this.registryData) {\r\n        registryID = i\r\n        for (var j = 0; j < this.processData[registryID].length; j++) {\r\n          minProcessBeginArray.push(Date.parse(this.processData[registryID][j].ProcessBeginTime))\r\n          maxProcessEndArray.push(Date.parse(this.processData[registryID][j].ProcessEndTime))\r\n        }\r\n        if (minProcessBeginArray.length > 0) {\r\n          this.registryData[registryID].BeginTime = Math.min(...minProcessBeginArray)\r\n\r\n        }\r\n        if (maxProcessEndArray.length > 0) {\r\n          this.registryData[registryID].EndTime = Math.max(...maxProcessEndArray)\r\n\r\n        }\r\n\r\n        maxProcessEndArray = []\r\n        minProcessBeginArray = []\r\n      }\r\n    },\r\n    calcChartRange() {\r\n      var chartMin = []\r\n      var chartMax = []\r\n\r\n      for (var i in this.parentProcessData) {\r\n        for (var j in this.parentProcessData[i]){\r\n          chartMin.push(this.parentProcessData[i][j].ProcessBeginTime)\r\n          chartMax.push(this.parentProcessData[i][j].ProcessEndTime)\r\n        }\r\n      }\r\n\r\n      this.chartOptions.hAxis.minValue = new Date(Math.min(...chartMin))\r\n      this.chartOptions.hAxis.maxValue = new Date(Math.max(...chartMax))\r\n\r\n    },\r\n    resetFilters() {\r\n      this.activeServerFilters = []\r\n      this.activeItemTypeFilters = []\r\n      this.activeDatabaseFilters = []\r\n    }\r\n  },\r\n  created: function() {\r\n    this.isLoading = true\r\n    //this.refactorParentRegistry()\r\n    //this.refactorChildRegistry()\r\n    this.refactorParentProcess()\r\n    this.refactorChildProcess()\r\n    //this.calcChartRange()\r\n\r\n    //console.log(this.parentProcessData[6405640])\r\n\r\n    console.log(this.parentProcessData)\r\n\r\n    for (var i in this.parentProcessData) {\r\n\r\n      for (var j in this.parentProcessData[i]) {\r\n        //console.log(this.parentProcessData[i][j].Process)\r\n        this.chartData.push([ this.parentProcessData[i][j].Process, String(this.parentProcessData[i][j].ProcessID), new Date(this.parentProcessData[i][j].ProcessBeginTime), new Date(this.parentProcessData[i][j].ProcessEndTime), String(this.parentProcessData[i][j].ProcessID) ])\r\n     }\r\n    }\r\n    //console.log(this.chartData)\r\n    this.isLoading = false\r\n    console.log(this.chartData)\r\n  }\r\n}\r\n</script>\r\n<style>\r\n.headertile {\r\n  background: #EEEEEE;\r\n}\r\n\r\ntext {\r\n pointer-events: none;\r\n}\r\n</style>\r\n"]}]}